---
version: "0.2"

branches:
  user/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: pre-merge

stages:
  pre-merge:
    worker:
      type: local
    steps:
      - TriggerStages:
          name: Trigger build and lint stages simultaneously
          stage_names:
            - build
            - lint
          haltOnFailure: true
      - SetPropertyFromCommand:
          name: Set short version as property from built artifacts
          property: metalk8s_short_version
          command: >
            bash -c '
            . <(curl -s "%(prop:artifacts_private_url)s/product.txt") &&
            echo $SHORT_VERSION'
      - TriggerStages:
          name: Trigger single-node and multiple-nodes steps with built ISO
          stage_names:
            - single-node
            - multiple-nodes

  build:
    worker:
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
      - ShellCommand:
          name: Wait for Docker daemon to be ready
          command: |
            bash -c '
            for i in {1..150}
            do
              docker info &> /dev/null && exit
              sleep 2
            done
            echo "Could not reach Docker daemon from buildbot worker" >&2
            exit 1'
          haltOnFailure: true
      - Git: &git_pull
          name: git pull
          repourl: "%(prop:git_reference)s"
          method: clobber
          retryFetch: true
          haltOnFailure: true
      - ShellCommand:
          name: build everything
          env:
            PYTHON_SYS: python36
          command: ./doit.sh
          usePTY: true
      - ShellCommand:
          name: Put the iso file in a separate folder
          command: >
            mkdir iso &&
            cp _build/metalk8s.iso _build/SHA256SUM _build/root/product.txt iso
      - Upload:
          name: upload artifacts
          source: iso/
          urls:
            - "*.iso"
            - SHA256SUM
            - product.txt

  lint:
    worker:
      type: kube_pod
      path: eve/workers/pod-linter/pod.yaml
      images:
        docker-linter: eve/workers/pod-linter
    steps:
      - Git: *git_pull
      - ShellCommand:
          name: Run all linting targets
          command: ./doit.sh lint
          usePTY: true
          haltOnFailure: false

  single-node:
    worker:
      type: openstack
      image: CentOS 7 (PVHVM)
      flavor: m1.medium
      path: eve/workers/openstack-single-node
    steps:
      - Git: *git_pull
      - ShellCommand: &retrieve_iso
          name: Retrieve ISO image
          command: >
            curl -s -XGET -o metalk8s.iso
            "%(prop:artifacts_private_url)s/metalk8s.iso"
          haltOnFailure: true
      - ShellCommand: &retrieve_iso_checksum
          name: Retrieve ISO image checksum
          command: >
            curl -s -XGET -o SHA256SUM
            "%(prop:artifacts_private_url)s/SHA256SUM"
          haltOnFailure: true
      - ShellCommand: &check_iso_checksum
          name: Check image with checksum
          command: sha256sum -c SHA256SUM
          haltOnFailure: true
      - ShellCommand:
          name: Create mountpoint
          command: >
            sudo mkdir -p /srv/scality/metalk8s-%(prop:metalk8s_short_version)s
      - ShellCommand:
          name: Mount ISO image
          command: >
            sudo mount -o loop metalk8s.iso
            /srv/scality/metalk8s-%(prop:metalk8s_short_version)s
          haltOnFailure: true
      - ShellCommand:
          name: Create bootstrap configuration file
          command: |
            sudo bash << EOF
            mkdir -p /etc/metalk8s
            cat > /etc/metalk8s/bootstrap.yaml << END
            apiVersion: metalk8s.scality.com/v1alpha2
            kind: BootstrapConfiguration
            networks:
              controlPlane: 10.100.0.0/16
              workloadPlane: 10.100.0.0/16
            ca:
              minion: $(hostname)
            END
            EOF
      - ShellCommand:
          name: Start the bootstrap process
          command: >
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_short_version)s/bootstrap.sh
          haltOnFailure: true
      - ShellCommand:
          name: Install kubectl for running tests
          command: >
            sudo yum install -y kubectl --disablerepo=*
            --enablerepo=metalk8s-kubernetes
      - ShellCommand:
          name: Run tests locally
          env:
            ISO_MOUNTPOINT: >
              /srv/scality/metalk8s-%(prop:metalk8s_short_version)s
          command: tox -e tests-local
          haltOnFailure: true
      - ShellCommand:
          name: Debug step - report IPs, add SSH keys, wait 1 hour
          timeout: 3600
          command: >
            ip a &&
            mkdir -p ~/.ssh &&
            echo "%(secret:ssh_pub_keys)s" >> ~/.ssh/authorized_keys &&
            sleep 3600
          doStepIf: false
          alwaysRun: true

  multiple-nodes:
    worker:
      type: openstack
      image: CentOS 7 (PVHVM)
      flavor: m1.medium
      path: eve/workers/openstack-multiple-nodes
    steps:
      - Git: *git_pull
      - ShellCommand: *retrieve_iso
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *check_iso_checksum
      - ShellCommand:
          name: Init terraform
          command: terraform init
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Validate terraform definition
          command: terraform validate
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Spawn openstack virtual infra
          command: terraform apply -auto-approve
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          env: &terraform_spawn_multiple_nodes
            OS_AUTH_URL: "%(secret:scality_cloud_auth_url)s"
            OS_REGION_NAME: "%(secret:scality_cloud_region)s"
            OS_USERNAME: "%(secret:scality_cloud_username)s"
            OS_PASSWORD: "%(secret:scality_cloud_password)s"
            OS_TENANT_NAME: "%(secret:scality_cloud_tenant_name)s"
            # FIXME: this makes hostnames too long
            # TF_VAR_worker_uuid: "%(prop:worker_uuid)s"
            TF_VAR_nodes_count: "2"
          haltOnFailure: true
      - ShellCommand:
          name: Check SSH config for bootstrap node
          command: |-
            if [ ! -f ssh_config ]; then
              echo "Missing SSH config file" >&2
              exit 1
            fi
            for _ in $(seq 1 12); do
              sleep 5
              ssh -F ssh_config bootstrap id && break
            done;
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Copy ISO to bootstrap node
          command: >
            scp -F ssh_config ../../../../metalk8s.iso bootstrap:
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Create mountpoint in bootstrap node
          command: >
            ssh -F ssh_config bootstrap
            sudo mkdir -p /srv/scality/metalk8s-%(prop:metalk8s_short_version)s
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Mount ISO image in bootstrap node
          command: >
            ssh -F ssh_config bootstrap
            sudo mount -o loop metalk8s.iso
            /srv/scality/metalk8s-%(prop:metalk8s_short_version)s
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Copy bootstrap configuration file in bootstrap node
          command: >
            scp -F ssh_config bootstrap-config.sh bootstrap: &&
            ssh -F ssh_config bootstrap sudo bash bootstrap-config.sh
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Start the bootstrap process in bootstrap node
          command: >
            ssh -F ssh_config bootstrap
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_short_version)s/bootstrap.sh
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Install kubectl on the boostrap node
          command: >
            ssh -F ssh_config bootstrap
            sudo yum install -y kubectl --disablerepo=*
            --enablerepo=metalk8s-kubernetes
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
      - ShellCommand:
          name: Run tests on the bootstrap node
          env:
            SSH_CONFIG_FILE: >-
              eve/workers/openstack-multiple-nodes/terraform/bootstrap_ssh_config
            ISO_MOUNTPOINT: >-
              /srv/scality/metalk8s-%(prop:metalk8s_short_version)s
            TEST_HOSTS_LIST: bootstrap
          command: >
            tox -e tests --
            --bootstrap-ip=%(prop:bootstrap_ip)s --skip-tls-verify
          haltOnFailure: true
      - ShellCommand:
          name: Destroy openstack virtual infra
          command: |-
            for _ in $(seq 1 3); do
               terraform destroy -auto-approve && break
            done;
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          env: *terraform_spawn_multiple_nodes
          alwaysRun: true
          sigtermTime: 600
      - ShellCommand:
          name: Debug step - report IPs, add SSH keys, wait 4 hours
          timeout: 14400
          command: >
            ip a &&
            mkdir -p ~/.ssh &&
            echo "%(secret:ssh_pub_keys)s" >> ~/.ssh/authorized_keys &&
            sleep 14400
          alwaysRun: true
          doStepIf: false
